/*=================================
=           Constants             =
=================================*/
var NOTES = {
    'A': 0,
    'A#': 1,
    'B': 2,
    'C': 3,
    'C#': 4,
    'D': 5,
    'D#': 6,
    'E': 7,
    'F': 8,
    'F#': 9,
    'G': 10,
    'G#': 11,
    0: 'A',
    1: 'A#',
    2: 'B',
    3: 'C',
    4: 'C#',
    5: 'D',
    6: 'D#',
    7: 'E',
    8: 'F',
    9: 'F#',
    10: 'G',
    11: 'G#'
};
var INTERVALS = {
    0: 'R',
    1: 'm2',
    2: 'M2',
    3: 'm3',
    4: 'M3',
    5: 'P4',
    6: 'T',
    7: 'P5',
    8: 'm6',
    9: 'M6',
    10: 'm7',
    11: 'M7'
};
var SCALES = {
    'Fifths': [0, 7],
    'Pentatonic Minor': [0, 3, 5, 7, 10],
    'Pentatonic Major': [0, 2, 4, 7, 9],
    'Ionian': [0, 2, 4, 5, 7, 9, 11],
    'Dorian': [0, 2, 3, 5, 7, 9, 10],
    'Phrygian': [0, 1, 3, 5, 7, 8, 10],
    'Lydian': [0, 2, 4, 6, 7, 9, 11],
    'Mixolydian': [0, 2, 4, 5, 7, 9, 10],
    'Aeolian': [0, 2, 3, 5, 7, 8, 10],
    'Locrian': [0, 1, 3, 5, 6, 8, 10],
};
var MODES = {
    'Ionian': [0, 2, 4, 5, 7, 9, 11],
    'Dorian': [0, 2, 3, 5, 7, 9, 10],
    'Phrygian': [0, 1, 3, 5, 7, 8, 10],
    'Lydian': [0, 2, 4, 6, 7, 9, 11],
    'Mixolydian': [0, 2, 4, 5, 7, 9, 10],
    'Aeolian': [0, 2, 3, 5, 7, 8, 10],
    'Locrian': [0, 1, 3, 5, 6, 8, 10],
};
var FRETWIDTHS = {
    0: 56.162,
    1: 52.976,
    2: 50.002,
    3: 47.196,
    4: 44.547,
    5: 42.047,
    6: 39.687,
    7: 37.459,
    8: 35.357,
    9: 33.373,
    10: 31.499,
    11: 29.732,
    12: 28.063,
    13: 26.488,
    14: 25.001,
    15: 23.598,
    16: 22.273,
    17: 21.023,
    18: 19.843,
    19: 18.73,
    20: 17.678,
    21: 16.686,
    22: 15.750
};

/*=================================
=            Functions            =
=================================*/
/* 
 * Returns Rotated Hue
 * - - -
 *  i | n in sequence s
 *  n | length of sequence s
 * - - -
 *  h | hue in degrees
 */
function getHue(i, n) {
    return Math.floor(i / n * 360);
}

/* 
 * Returns Neck Length
 */
var neckLength = function() {
    var necklength = 0;
    for (var i = 0; i < FRETWIDTHS.length; i++) {
        necklength += FRETWIDTHS[i];
    }
    return necklength;
}

/* 
 * Get Note by String & Fret number
 * - - -
 *  string | string number
 *  fret   | fret number
 * - - -
 *  n | Note
 */
var getNote = function(string, fret) {
    var root = NOTES[string];
    return NOTES[(fret + root) % 12];
}

/*================================
=            Guitar               =
 ================================*/

/*** SETTINGS ***/
var currentScale = [];
var NUM_FRETS = 12;
var ROOT = NOTES[0]; //'A';
var SCALE_ROOT = NOTES[0]; //'A';;


/* --- HTML ELEMENTS --- */
var Fretboard;
var scale_type_selector;

/* --- Guitar String Object --- */
var GuitarString = function(rootNote, stringNumber) {
    this.stringNumber = stringNumber;
    this.rootNote = rootNote;
    this.rootOffset = NOTES[rootNote];

    // set new root
    this.root = function(newRoot) {
        this.rootNote = newRoot;
    }

    this.fret = function(fretNumber) {
        return NOTES[(fretNumber + this.rootOffset) % 12];
    }

    this.draw = function() {
        // create an list of frets for each string
        var stringHtml = document.getElementById('string-' + stringNumber);
        var fretsList = document.createElement("ol");
        fretsList.id = "string-" + stringNumber + "fretsList";
        fretsList.className = "fretsList";
        stringHtml.appendChild(fretsList);

        // construct the open notes html
        var openNote = NOTES[this.rootOffset];
        var openFretHtml = document.createElement("li");
        openFretHtml.id = 's-' + stringNumber + '-f-0';
        openFretHtml.className = "fret";
        openFretHtml.setAttribute("data-note", openNote);
        openFretHtml.setAttribute("data-tone", (this.rootOffset) % 12);
        openFretHtml.setAttribute("data-interval", (this.rootOffset) % 12);
        openFretHtml.style.width = "2%";
        var fretHighlight = document.createElement("div");
        var fretNoteHtml = document.createElement("div");
        fretHighlight.id = 'highlight-s-' + stringNumber + '-f-0';
        fretHighlight.className = 'highlight';
        fretNoteHtml.id = 'fretnote-s-' + stringNumber + '-f-0';
        fretNoteHtml.className = "fretnote";
        fretNoteHtml.appendChild(document.createTextNode(openNote));
        var fretNumber = document.createElement("div");
        fretNumber.id = 'number-s-' + stringNumber + '-f-0';
        fretNumber.className = 'number';
        fretHighlight.appendChild(fretNumber);
        fretHighlight.appendChild(fretNoteHtml);
        openFretHtml.appendChild(fretHighlight);
        fretsList.appendChild(openFretHtml);

        // construct each fret
        for (var i = 1; i < NUM_FRETS + 1; i++) {
            // insert note data to fret list item
            var fretNote = NOTES[(i + this.rootOffset) % 12];
            var fretHtml = document.createElement("li");
            fretHtml.id = 's-' + stringNumber + '-f-' + i;
            fretHtml.className = "fret";
            fretHtml.setAttribute("data-note", fretNote);
            fretHtml.setAttribute("data-tone", (i + this.rootOffset) % 12);
            fretHtml.setAttribute("data-interval", (i + this.rootOffset) % 12);
            fretHtml.style.width = (FRETWIDTHS[i] * .1) + "%";
            var fretHighlight = document.createElement("div");
            fretHighlight.id = 'highlight-s-' + stringNumber + '-f-' + i;
            fretHighlight.className = 'highlight';
            var fretNoteHtml = document.createElement("div");
            fretNoteHtml.id = 'fretnote-s-' + stringNumber + '-f-' + i;
            fretNoteHtml.className = "fretnote";
            var fretNoteLabel = document.createTextNode(fretNote);
            fretNoteHtml.appendChild(fretNoteLabel);
            var fretNumber = document.createElement("div");
            fretHighlight.appendChild(fretNoteHtml);
            fretNumber.id = 'number-s-' + stringNumber + '-f-' + i;
            fretNumber.className = 'number';
            fretHighlight.appendChild(fretNumber);

            // fret markers
            if ((stringNumber == "3" && i == 3) ||
                (stringNumber == "3" && i == 5) ||
                (stringNumber == "3" && i == 7) ||
                (stringNumber == "3" && i == 8) ||
                (stringNumber == "3" && i == 15) ||
                (stringNumber == "3" && i == 17) ||
                (stringNumber == "3" && i == 19) ||
                (stringNumber == "3" && i == 21)) {
                var marker = document.createElement("div");
                marker.className = "marker-1 marker";
                fretHighlight.appendChild(marker);
            }
            if ((stringNumber == "3" && i == 12)) {
                var marker2a = document.createElement("div");
                marker2a.className = "marker-2a marker";
                var marker2b = document.createElement("div");
                marker2b.className = "marker-2b marker";
                fretHighlight.appendChild(marker2a);
                fretHighlight.appendChild(marker2b);
            }

            // add function for root note selection
            fretHtml.addEventListener("click", function() {
                Guitar.setScaleRoot(this.dataset.tone)
            });
            fretHtml.appendChild(fretHighlight);
            fretsList.appendChild(fretHtml);
        };
    }

    this.refresh = function() {
            var fretNote = NOTES[(i + this.rootOffset) % 12];
            var stringHtml = document.getElementById("string-" + stringNumber + "fretsList");
            for (var i = 1; i < NUM_FRETS + 1; i++) {
                var fretHtml = document.getElementById('s-' + stringNumber + '-f-' + i);
                fretHtml.setAttribute("data-tone", (i + this.rootOffset) % 12);
                fretHtml.setAttribute("data-interval", (i + this.rootOffset) % 12);
                var fretHighlight = document.getElementById('highlight-s-' + stringNumber + '-f-' + i);
                var hue = getHue((i + this.rootOffset) % 12, 12);
                fretHighlight.style.border = "0px solid hsla(" + hue + ", 100%, 70%,90)";
                var fretNoteHtml = document.getElementById('fretnote-s-' + stringNumber + '-f-' + i);
                // fretHighlight.style.background = "hsla(" + hue + ", 100%, 70%,90)";
                fretNoteHtml.style.opacity = 0.6;
            }
        }
        // call for each string
    this.displayInterval = function(interval) {
        var fretNote = NOTES[(interval + this.rootOffset) % 12];
        var stringHtml = document.getElementById("string-" + stringNumber + "fretsList");
        for (var i = 1; i < NUM_FRETS + 1; i++) {
            var fretHtml = document.getElementById('s-' + stringNumber + '-f-' + i);
            fretHtml.setAttribute("data-tone", (i + this.rootOffset) % 12);
            fretHtml.setAttribute("data-interval", (i + this.rootOffset) % 12);
            var fretHighlight = document.getElementById('highlight-s-' + stringNumber + '-f-' + i);
            //fretHighlight.style.background = "transparent";   
            var hue = getHue((i + this.rootOffset) % 12, 12);
            fretHighlight.style.background = "hsla(" + hue + ", 100%, 70%,90)";
            var fretNoteHtml = document.getElementById('fretnote-s-' + stringNumber + '-f-' + i);
            fretNoteHtml.style.opacity = 100;

        }
    }
};

var Guitar = {
    update: function(scale_root) {
        for (var i = 0; i < 6; i++) {
            GuitarsStrings[i].setScaleRoot(parseInt(scale_root));
        }
    },
    displayInterval: function(interval) {
        for (var i = 0; i < 6; i++) {
            GuitarsStrings[i].displayInterval(interval);
        }
    },
    hideInterval: function(interval) {

    },
    updateFretboardIntervals: function() {

        for (var stringNumb = 1; stringNumb < 7; stringNumb++) {
            var stringHtml = document.getElementById('string-' + stringNumb);
            var fretsList = document.getElementById("string-" + stringNumb + "fretsList");

            for (var i = 0; i < NUM_FRETS; i++) {
                /* STEP THROUGH THE FRETS */
                var fretHtml = document.getElementById('s-' + stringNumb + '-f-' + i);
                //  console.log(fretHtml);console.log('update data interval');
                if (fretHtml !== null) {
                    //console.info(fretHtml.dataset.tone);
                    var fretHighlight = document.getElementById('highlight-s-' + stringNumb + '-f-' + i);
                    var fretTone = fretHtml.dataset.tone;
                    var newInterval = Math.abs(parseInt(
                        parseInt(fretTone) -
                        parseInt(SCALE_ROOT) + 12)) % 12;

                    fretHtml.setAttribute("data-interval", newInterval);

                    /* Update note colour / background and border*/
                    var hue = getHue(newInterval, 12);
                    //  console.info(selectedI[newInterval] == "on") {
                    fretHighlight.style.background = "hsla(" + hue + ", 100%, 70%,90)";
                    fretHighlight.style.borderColor = "1px solid hsla(" + hue + ", 70%, 95%,90)";
                    fretHighlight.style.opacity = "1";
                } else {
                    fretHighlight.style.background = "hsla(" + hue + ", 70%, 90%,0.1)";
                    fretHighlight.style.border = "0px solid hsla(" + hue + ", 100%, 70%,90)";
                    fretHighlight.style.opacity = "0.6";
                }
            }
            if (i == 0) {
                fretHighlight.style.background = "transparent";
            }
        }
    },
    setScaleRoot: function(scale_root) {
        console.log("** Guitar.setScaleRoot(" + NOTES[scale_root] + ")");

        SCALE_ROOT = scale_root;

        for (var stringNumb = 1; stringNumb < 7; stringNumb++) {
            var stringHtml = document.getElementById('string-' + stringNumb);
            var fretsList = document.getElementById("string-" + stringNumb + "fretsList");

            for (var i = 0; i < NUM_FRETS; i++) {
                /* STEP THROUGH THE FRETS */
                var fretHtml = document.getElementById('s-' + stringNumb + '-f-' + i);
                if (fretHtml !== null) {
                    var fretHighlight = document.getElementById('highlight-s-' + stringNumb + '-f-' + i);
                    var fretTone = fretHtml.dataset.tone;
                    var newInterval = Math.abs(parseInt(
                        parseInt(fretTone) -
                        parseInt(scale_root) + 12)) % 12;

                    fretHtml.setAttribute("data-interval", newInterval);

                    /* ** Update note colour / background and border ** */
                    var hue = getHue(newInterval, 12);

                    if (selectedIntervals[newInterval] == "on") {
                        fretHighlight.style.background = "hsla(" + hue + ", 100%, 70%,90)";
                        fretHighlight.style.borderColor = "1px solid hsla(" + hue + ", 70%, 95%,90)";
                        fretHighlight.style.opacity = "1";
                    } else {
                        fretHighlight.style.background = "hsla(" + hue + ", 70%, 90%,0.1)";
                        fretHighlight.style.border = "0px solid hsla(" + hue + ", 100%, 70%,90)";
                        fretHighlight.style.opacity = "0.6";
                    }
                }
                if (i == 0) {
                    fretHighlight.style.background = "transparent";
                }
            }
        }
    },
    setScale: function(scale_type) {
        console.info('** Guitar.setScale(' + scale_type + ') / SCALES[scale_type].length : ' + SCALES[scale_type].length);
        for (var i = 0; i < 12; i++) {
            console.log('* Guitar.setScale() turn interval off' + i);
            selectedIntervals[i] = 'off';
            turnIntervalOff(i);
            //console.log('Guitar.setScale() / selectedIntervals :' +selectedIntervals);
        }
        this.updateFretboardIntervals();
        for (var i = 0; i < SCALES[scale_type].length; i++) {
            var intervalOn = SCALES[scale_type][i];
            selectedIntervals[intervalOn] = 'on';
            turnIntervalOn(intervalOn);
        }
        this.updateFretboardIntervals();
        // update interval buttons
        // 

    },
    setScaleType: function(scale_type) {
        console.info('** Guitar.setScale(' + scale_type + ') / SCALES[scale_type].length : ' + SCALES[scale_type].length);
        for (var i = 0; i < 12; i++) {
            console.log('* Guitar.setScale() turn interval off' + i);
            selectedIntervals[i] = 'off';
            turnIntervalOff(i);
            //console.log('Guitar.setScale() / selectedIntervals :' +selectedIntervals);
        }
        this.updateFretboardIntervals();
        for (var i = 0; i < SCALES[scale_type].length; i++) {
            var intervalOn = SCALES[scale_type][i];
            selectedIntervals[intervalOn] = 'on';
            turnIntervalOn(intervalOn);
        }
        this.updateFretboardIntervals();
        // update interval buttons
        // 
    }

}

var refreshFretboard = function() {
    for (var i = 0; i < 6; i++) {
        GuitarsStrings[i].refresh();
    }
}

/*
Go through the interface buttons, if the interval is selected, colour with its hue
*/
var colourIntervalButtons = function() {
    for (var i = 1; i < 13; i++) {
        var hue = getHue((i - 1), 12);
        var button = $("ul#intervals-button-list li:nth-child(" + (i) + ")").find("button").css("background", "#777777");
        var button = $("ul#intervals-button-list li:nth-child(" + (i) + ")").find("button.selected-interval").css("background", "hsla(" + hue + ", 100%, 70%,90)");
    }
}

var toggleInterval = function(interval) {
    var button = document.getElementById("interval-button-" + interval);
    if (button.dataset.status == "off") {
        button.className += " selected-interval";
        button.dataset.status = "on";
        selectedIntervals[interval] = "on";
        // if(interval == 0) {  selectedIntervals[11] = "on"; }
        // currentScale.push(interval);
        // Guitar.displayInterval(interval);
    } else
    if (button.dataset.status == "on") {
        button.className = "";
        button.className = "btn btn-primary badge";
        button.dataset.status = "off";
        selectedIntervals[interval] = "off";
        //  if(interval == 0) {  selectedIntervals[11] = "off"; }
    };
    Guitar.updateFretboardIntervals();

    colourIntervalButtons();
}

var turnIntervalOn = function(interval) {
    var button = document.getElementById("interval-button-" + interval);
    button.className += " selected-interval";
    button.dataset.status = "on";
    selectedIntervals[interval] = "on";
    Guitar.updateFretboardIntervals();
    colourIntervalButtons();
    console.log("turnIntervalOn(" + Intervals[interval] + ") / selectedIntervals: ");
    console.info(selectedIntervals);
}

var turnIntervalOff = function(interval) {
    var button = document.getElementById("interval-button-" + interval);
    button.className = "";
    button.className = "btn btn-primary badge";
    button.dataset.status = "off";
    selectedIntervals[interval] = "off";
    Guitar.updateFretboardIntervals();
    colourIntervalButtons();
    console.log("turnIntervalOff(" + Intervals[interval] + ") / selectedIntervals: " + selectedIntervals);
}

var selectedIntervals = {
    0: 'on',
    1: 'off',
    2: 'off',
    3: 'off',
    4: 'off',
    5: 'off',
    6: 'off',
    7: 'off',
    8: 'off',
    9: 'off',
    10: 'off'
};
Fretboard = document.getElementById('fretboard');
scale_type_selector = document.getElementById("scale-type-select");

// create guitar strings
var string6 = new GuitarString('E', 6);
var string5 = new GuitarString('A', 5);
var string4 = new GuitarString('D', 4);
var string3 = new GuitarString('G', 3);
var string2 = new GuitarString('B', 2);
var string1 = new GuitarString('E', 1);
var GuitarsStrings = [string1, string2, string3, string4, string5, string6];

/* initial draw */
for (var i = 0; i < 6; i++) {
    var string_ = GuitarsStrings[i];
    string_.draw();
    string_.refresh();
}

function requestRootNote() {

}



/*================================
 =            StartUp             =
=================================*/
$(document).ready(function() {

    // populate multiple select with modes list
    for (var mode in MODES) {
        var option = document.createElement("option");
        option.setAttribute("value", mode);
        var option_label = document.createTextNode(mode);
        option.appendChild(option_label);
        scale_type_selector.appendChild(option);
    }

    // REQUEST root note
    Guitar.setScaleRoot(0);
    requestRootNote();

    // colour intervals to match selected intervals
    colourIntervalButtons();



});